{"meta":{"title":"ytyflyfree","subtitle":"只要是活着的东西，神也杀给你看","description":"一名前端学习者，希望能够不止前端","author":"yty","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"秋招学习日记","slug":"秋招学习日记","date":"2023-10-02T06:31:53.000Z","updated":"2023-10-29T18:27:53.833Z","comments":true,"path":"2023/10/02/秋招学习日记/","link":"","permalink":"http://example.com/2023/10/02/%E7%A7%8B%E6%8B%9B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/","excerpt":"","text":"看代码说输出async function async1() &#123; console.log(&#39;async1 start&#39;); await async2(); console.log(&#39;async1 end&#39;);&#125;async function async2() &#123; console.log(&#39;async2&#39;);&#125;console.log(&#39;script start&#39;);setTimeout(function() &#123; console.log(&#39;setTimeout&#39;);&#125;, 0);async1();new Promise(function(resolve) &#123; console.log(&#39;promise1&#39;); resolve();&#125;).then(function() &#123; console.log(&#39;promise2&#39;);&#125;);console.log(&#39;script end&#39;); 首先，事件循环从宏任务（macrostack）队列开始，这个时候，宏任务队列中，只有一个 script (整体代码)任务。从宏任务队列中取出一个任务来执行。首先执行 console.log(‘script start’)，输出 ‘script start’遇到 setTimeout 把 console.log(‘setTimeout’) 放到 macrotask 队列中执行 aync1() 输出 ‘async1 start’ 和 ‘async2’ ,把 console.log(‘async1 end’) 放到 micro 队列中执行到 promise ，输出 ‘promise1’ ，把 console.log(‘promise2’) 放到 micro 队列中执行 console.log(‘script end’)，输出 ‘script end’macrotask 执行完成会执行 microtask ，把 microtask quene 里面的 microtask 全部拿出来一次性执行完，所以会输出 ‘async1 end’ 和 ‘promise2’开始新一轮的事件循环，去除执行一个 macrotask 执行，所以会输出 ‘setTimeout’ 这里的一个知识点 async 怎么样异步的，js运行在碰到await关键字时，会记录在哪里暂停执行。等到await右边的值可以使用了，就是处理完回调了，js会向消息列对中推送一个任务，这个任务会恢复异步函数的执行。这样的话，即使await后面跟着一个立即可用的值，函数的其余部分也会被异步求值。","categories":[],"tags":[]},{"title":"前端网安学习","slug":"study","date":"2023-09-30T15:05:54.000Z","updated":"2023-09-30T15:14:55.951Z","comments":true,"path":"2023/09/30/study/","link":"","permalink":"http://example.com/2023/09/30/study/","excerpt":"","text":"前端网络安全前端网络安全一直是面试中常考的要点，这里来梳理总结一下，加油","categories":[],"tags":[{"name":"八股文","slug":"八股文","permalink":"http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"}]},{"title":"react hook学习","slug":"jsstudy","date":"2023-09-28T08:11:26.000Z","updated":"2023-09-30T15:18:14.942Z","comments":true,"path":"2023/09/28/jsstudy/","link":"","permalink":"http://example.com/2023/09/28/jsstudy/","excerpt":"","text":"react hooks学习倒计时demo 1234567891011121314151617181920212223242526272829303132333435363738import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;function CounterButton() &#123; const [count, setCount] = useState(0); const [isIncrementing, setIsIncrementing] = useState(false); useEffect(() =&gt; &#123; let interval; if (isIncrementing) &#123; interval = setInterval(() =&gt; &#123; setCount(prevCount =&gt; prevCount + 1); &#125;, 1000); &#125; else &#123; clearInterval(interval); &#125; return () =&gt; &#123; clearInterval(interval); &#125;; &#125;, [isIncrementing]); const toggleIncrementing = () =&gt; &#123; setIsIncrementing(!isIncrementing); &#125;; return ( &lt;div&gt; &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;toggleIncrementing&#125;&gt; &#123;isIncrementing ? &#x27;Stop Incrementing&#x27; : &#x27;Start Incrementing&#x27;&#125; &lt;/button&gt; &lt;/div&gt; );&#125;export default CounterButton; 效果如图，这里面使用了usetate,useeffect","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]}],"categories":[],"tags":[{"name":"八股文","slug":"八股文","permalink":"http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"},{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]}