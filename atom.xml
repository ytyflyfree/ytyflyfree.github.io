<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ytyflyfree</title>
  
  <subtitle>只要是活着的东西，神也杀给你看</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-29T18:27:53.833Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>秋招学习日记</title>
    <link href="http://example.com/2023/10/02/%E7%A7%8B%E6%8B%9B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2023/10/02/%E7%A7%8B%E6%8B%9B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2023-10-02T06:31:53.000Z</published>
    <updated>2023-10-29T18:27:53.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看代码说输出"><a href="#看代码说输出" class="headerlink" title="看代码说输出"></a>看代码说输出</h1><p><code>async  function  async1()  &#123;         console.log(&#39;async1 start&#39;);         await  async2();         console.log(&#39;async1 end&#39;);</code><br><code>&#125;</code><br><code>async  function  async2()  &#123;         console.log(&#39;async2&#39;);</code><br><code>&#125;</code><br><code>console.log(&#39;script start&#39;);</code><br><code>setTimeout(function()  &#123;         console.log(&#39;setTimeout&#39;);</code><br><code>&#125;,  0);</code><br><code>async1();</code><br><code>new  Promise(function(resolve)  &#123;         console.log(&#39;promise1&#39;);         resolve();</code><br><code>&#125;).then(function()  &#123;         console.log(&#39;promise2&#39;);</code><br><code>&#125;);</code><br><code>console.log(&#39;script end&#39;);</code></p><p>首先，事件循环从宏任务（macrostack）队列开始，这个时候，宏任务队列中，只有一个 script (整体代码)任务。从宏任务队列中取出一个任务来执行。<br>首先执行 console.log(‘script start’)，输出 ‘script start’<br>遇到 setTimeout 把 console.log(‘setTimeout’) 放到 macrotask 队列中<br>执行 aync1() 输出 ‘async1 start’ 和 ‘async2’ ,把 console.log(‘async1 end’) 放到 micro 队列中<br>执行到 promise ，输出 ‘promise1’ ，把 console.log(‘promise2’) 放到  micro 队列中<br>执行 console.log(‘script end’)，输出 ‘script end’<br>macrotask 执行完成会执行 microtask ，把 microtask quene 里面的 microtask 全部拿出来一次性执行完，所以会输出 ‘async1 end’ 和 ‘promise2’<br>开始新一轮的事件循环，去除执行一个 macrotask 执行，所以会输出 ‘setTimeout’</p><p>这里的一个知识点 async 怎么样异步的，js运行在碰到await关键字时，会记录在哪里暂停执行。等到await右边的值可以使用了，就是处理完回调了，js会向消息列对中推送一个任务，这个任务会恢复异步函数的执行。这样的话，即使await后面跟着一个立即可用的值，函数的其余部分也会被异步求值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;看代码说输出&quot;&gt;&lt;a href=&quot;#看代码说输出&quot; class=&quot;headerlink&quot; title=&quot;看代码说输出&quot;&gt;&lt;/a&gt;看代码说输出&lt;/h1&gt;&lt;p&gt;&lt;code&gt;async  function  async1()  &amp;#123;         consol</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端网安学习</title>
    <link href="http://example.com/2023/09/30/study/"/>
    <id>http://example.com/2023/09/30/study/</id>
    <published>2023-09-30T15:05:54.000Z</published>
    <updated>2023-09-30T15:14:55.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端网络安全"><a href="#前端网络安全" class="headerlink" title="前端网络安全"></a>前端网络安全</h2><p>前端网络安全一直是面试中常考的要点，这里来梳理总结一下，加油</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端网络安全&quot;&gt;&lt;a href=&quot;#前端网络安全&quot; class=&quot;headerlink&quot; title=&quot;前端网络安全&quot;&gt;&lt;/a&gt;前端网络安全&lt;/h2&gt;&lt;p&gt;前端网络安全一直是面试中常考的要点，这里来梳理总结一下，加油&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>react hook学习</title>
    <link href="http://example.com/2023/09/28/jsstudy/"/>
    <id>http://example.com/2023/09/28/jsstudy/</id>
    <published>2023-09-28T08:11:26.000Z</published>
    <updated>2023-09-30T15:18:14.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-hooks学习"><a href="#react-hooks学习" class="headerlink" title="react hooks学习"></a>react hooks学习</h1><p>倒计时demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CounterButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [isIncrementing, setIsIncrementing] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> interval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isIncrementing) &#123;</span><br><span class="line">      interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function"><span class="params">prevCount</span> =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [isIncrementing]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleIncrementing</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsIncrementing</span>(!isIncrementing);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleIncrementing&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;isIncrementing ? &#x27;Stop Incrementing&#x27; : &#x27;Start Incrementing&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterButton</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如图，这里面使用了usetate,useeffect</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;react-hooks学习&quot;&gt;&lt;a href=&quot;#react-hooks学习&quot; class=&quot;headerlink&quot; title=&quot;react hooks学习&quot;&gt;&lt;/a&gt;react hooks学习&lt;/h1&gt;&lt;p&gt;倒计时demo&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
</feed>
